import asyncio
import os

from request import get_forecast_city_by_name, get_city_location_key, check_bad_weather

from dotenv import load_dotenv
from aiogram import Bot, types, F, html, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


load_dotenv()

TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(Command('start'))
async def cmd_start(msg: types.Message):
    """
    –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
    :param msg:
    :return:
    """
    kb = [
        [types.KeyboardButton(text="/start")],
        [types.KeyboardButton(text="/help")],
        [types.KeyboardButton(text="/geo")]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–ù–∞–∂–º–∏ –Ω–∞ /weather")
    await msg.answer('Hello üëã, it is weather Bot. He helps you to find the '
                     'information about the weather and some forecasts.', reply_markup=keyboard)

    await msg.answer('–≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é', reply_markup=main_kb)


@dp.callback_query(F.data == "forecast_now")
async def send_random_value(callback: types.CallbackQuery):
    """
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback: forecast_now
    :return: str
    """
    await callback.message.answer('–ù–∞–ø–∏—à–∏ 2 –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')

    

    await callback.message.answer('–í–æ—Ç –∏ –ø–æ–≥–æ–¥–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –≥–æ—Ä–æ–¥–µ )))')
    # await callback.message.answer(get_forecast_city_by_name(api_key=TOKEN, city_name=city_1, days=0))
    await callback.message.answer('–í–æ—Ç –∏ –ø–æ–≥–æ–¥–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –≥–æ—Ä–æ–¥–µ )))')
    # await callback.message.answer(get_forecast_city_by_name(api_key=TOKEN, city_name=city_2, days=0))


@dp.callback_query(F.data == "3_days")
async def send_random_value(callback: types.CallbackQuery):
    """
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –ø–æ –º–µ—Å—Ç—É –∫—É–¥–∞ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback: 3_days
    :return: str
    """
    await callback.message.answer('–ù–∞–ø–∏—à–∏ 2 –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')

    @dp.message(F.text)
    async def message_city(msg: types.Message):
        """
        –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param msg:
        :return: dict
        """
        city_1 = msg.text
        await msg.answer(f'–í–æ—Ç –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_1}\n',
                         get_forecast_city_by_name(api_key=TOKEN, city_name=city_1, days=5))

    @dp.message(F.text)
    async def message_city(msg: types.Message):
        """
        –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param msg:
        :return: dict
        """
        city_2 = msg.text
        await msg.answer(f'–í–æ—Ç –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_2}\n',
                         get_forecast_city_by_name(api_key=TOKEN, city_name=city_2, days=5))

    await callback.message.answer('–ü–æ–≥–æ–¥–∞ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º–∏–∫, –Ω–æ –Ω–µ —Ñ–∞–∫—Ç')


@dp.callback_query(F.data == "5_days")
async def send_random_value(callback: types.CallbackQuery):
    """
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –ø–æ –º–µ—Å—Ç—É –∫—É–¥–∞ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback: 5_days
    :return: str
    """
    await callback.message.answer('–ù–∞–ø–∏—à–∏ 2 –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')


    @dp.message(F.text)
    async def message_city(msg: types.Message):
        """
        –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param msg:
        :return: dict
        """
        city_1 = msg.text
        await msg.answer(f'–í–æ—Ç –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_1}\n', get_forecast_city_by_name(api_key=TOKEN, city_name=city_1, days=5))


    @dp.message(F.text)
    async def message_city(msg: types.Message):
        """
        –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param msg:
        :return: dict
        """
        city_2 = msg.text
        await msg.answer(f'–í–æ—Ç –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_2}\n',
                         get_forecast_city_by_name(api_key=TOKEN, city_name=city_2, days=5))

    await callback.message.answer('–ü–æ–≥–æ–¥–∞ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º–∏–∫, –Ω–æ –Ω–µ —Ñ–∞–∫—Ç')


# keybord buttons
lst_of_main_btns = [
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è', callback_data='3_days')],
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π', callback_data='5_days')],
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Å—Ç–æ —Å–µ–π—á–∞—Å', callback_data='forecast_now')]
]

# the main keyboard for the telegram bot
main_kb = InlineKeyboardMarkup(inline_keyboard=lst_of_main_btns)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main(), debug=True)
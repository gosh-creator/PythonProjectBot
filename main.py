import asyncio
import os

from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from request import get_forecast_city_by_name, get_city_location_key, check_bad_weather, presentation_of_the_data

from dotenv import load_dotenv
from aiogram import Bot, types, F, html, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

load_dotenv()

TOKEN = os.getenv('TOKEN')
TOKEN_API = os.getenv('TOKEN_API')
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

users_data = {}

class Form(StatesGroup):
    """
    –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –±–æ—Ç
    :param : city_one, city_two, city_now
    """
    city_one_choosing = State()
    city_two_choosing = State()
    city_now_done = State()

@dp.message(Command('start'))
async def cmd_start(msg: types.Message):
    """
    –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
    :param msg: str
    :return:
    """

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True, input_field_placeholder="–ù–∞–∂–º–∏ –Ω–∞ /weather")
    await msg.answer('Hello üëã, it is weather Bot. He helps you to find the '
                     'information about the weather and some forecasts.', reply_markup=keyboard)

    await msg.answer('–≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é', reply_markup=main_kb)

@dp.message(Command('help'))
async def help(msg: types.Message):
    await msg.answer('–≤–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:')
    await msg.answer("""
    /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, 
    /help - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, 
    /geo - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ))
    """)

@dp.callback_query(StateFilter(None), F.data == "3_days")
async def send_random_value(callback: types.CallbackQuery, state: FSMContext):
    """
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –ø–æ –º–µ—Å—Ç—É –∫—É–¥–∞ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback: 3_days
    :return: str
    """

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                         input_field_placeholder="–≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥")

    await callback.message.answer('–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥', reply_markup=keyboard)

    await state.set_state(Form.city_one_choosing)


@dp.message(Form.city_one_choosing)
async def city_one_choose_for_3_days(msg: types.Message, state: FSMContext):

    await state.update_data(choosen_city_one=msg.text)

    users_data['city_one_choosing'] = msg.text

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                         input_field_placeholder="–≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥")

    await msg.answer("–°–ø–∞—Å–∏–±–æ, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞", reply_markup=keyboard)


    await state.set_state(Form.city_two_choosing)



@dp.message(Form.city_two_choosing)
async def city_two_choose_for_3_days(msg: types.Message, state: FSMContext):

    await state.update_data(choosen_city_two=msg.text)

    users_data['city_two_choosing'] = msg.text

    await msg.answer("Thank you for choosing the second city")
    await state.set_state(Form.city_now_done)

    user_data = await state.get_data()

    try:

        data_1 = get_forecast_city_by_name(api_key=TOKEN_API, city_name=users_data['city_one_choosing'], days=3)
        data_2 = get_forecast_city_by_name(api_key=TOKEN_API, city_name=users_data['city_two_choosing'], days=3)

        kb = [
            types.KeyboardButton(text="/start"),
            types.KeyboardButton(text="/help"),
            types.KeyboardButton(text="/geo")
        ]

        keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                             input_field_placeholder="–≤–æ—Ç –∏ –ø–æ–≥–æ–¥–∫–∞ –≤ –≥–æ—Ä–æ–¥–∞—Ö")

        text = f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–ª—è –≥–æ—Ä–æ–¥–∞ {html.bold(users_data['city_one_choosing'])}\n"
        for key, value in data_1.items():
            text += f"{key}: {html.bold(value)}\n"
        await msg.answer(text)

        text = f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–ª—è –≥–æ—Ä–æ–¥–∞ {html.bold(users_data['city_two_choosing'])}\n"
        for key, value in data_2.items():
            text += f"{key}: {html.bold(value)}\n"
        await msg.answer(text)

        await msg.answer(f'<b>Thank you</b>, {msg.from_user.first_name}', parse_mode=ParseMode.HTML)

    except Exception as e:

        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None

    finally:

        await state.clear()


@dp.callback_query(StateFilter(None), F.data == "5_days")
async def send_random_value(callback: types.CallbackQuery, state: FSMContext):
    """
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –ø–æ –º–µ—Å—Ç—É –∫—É–¥–∞ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param callback: 5_days
    :return: str
    """

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                         input_field_placeholder="–≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥")


    await callback.message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=keyboard)

    await state.set_state(Form.city_one_choosing)


@dp.message(Form.city_one_choosing)
async def city_one_choose_for_5_days(msg: types.Message, state: FSMContext):

    await state.update_data(choosen_city_one=msg.text)

    users_data['city_one_choosing'] = msg.text

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                         input_field_placeholder="–≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥")

    await msg.answer("–°–ø–∞—Å–∏–±–æ, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞")

    await state.set_state(Form.city_two_choosing)



@dp.message(Form.city_two_choosing)
async def city_two_choose_for_5_days(msg: types.Message, state: FSMContext):

    await state.update_data(choosen_city_two=msg.text)

    users_data['city_two_choosing'] = msg.text

    kb = [
        types.KeyboardButton(text="/start"),
        types.KeyboardButton(text="/help"),
        types.KeyboardButton(text="/geo")
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[kb], resize_keyboard=True,
                                         input_field_placeholder="–≤–æ—Ç –∏ –ø–æ–≥–æ–¥–∫–∞")

    await msg.answer("–°–ø–∞—Å–∏–±–æ, –≤–æ—Ç –ø–æ–≥–æ–¥–∫–∞", reply_markup=keyboard)

    await state.set_state(Form.city_now_done)

    user_data = await state.get_data()


    try:

        data_1 = get_forecast_city_by_name(api_key=TOKEN_API, city_name=users_data['city_one_choosing'], days=5)
        data_2 = get_forecast_city_by_name(api_key=TOKEN_API, city_name=users_data['city_two_choosing'], days=5)


        text = f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–ª—è –≥–æ—Ä–æ–¥–∞ {html.bold(users_data['city_one_choosing'])}\n"
        for key, value in data_1.items():
            text += f"{key}: {html.bold(value)}\n"
        await msg.answer(text)

        text = f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–ª—è –≥–æ—Ä–æ–¥–∞ {html.bold(users_data['city_two_choosing'])}\n"
        for key, value in data_2.items():
            text += f"{key}: {html.bold(value)}\n"
        await msg.answer(text)

        await msg.answer(f'<b>Thank you</b>, {msg.from_user.first_name}', parse_mode=ParseMode.HTML)

    except Exception as e:

        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

        return None

    finally:

        await state.clear()


@dp.message(F.data == 'forecast_now')
async def for_now(msg: types.Message):
    await msg.answer(html.bold("I am sorry, right now this function is not being allow ("))

# keybord buttons
lst_of_main_btns = [
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è', callback_data='3_days')],
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π', callback_data='5_days')],
[InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Å—Ç–æ —Å–µ–π—á–∞—Å', callback_data='forecast_now')]
]

# the main keyboard for the telegram bot
main_kb = InlineKeyboardMarkup(inline_keyboard=lst_of_main_btns)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main(), debug=True)